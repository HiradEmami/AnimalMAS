/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package animalsimulation.behavior.movement;

import animalsimulation.behavior.base.State;
import animalsimulation.model.base.Agent;
import animalsimulation.model.base.WorldObject;
import animalsimulation.model.bee.BeeAgent;
import animalsimulation.model.bee.BeeFood;
import animalsimulation.model.bee.BeeHive;
import animalsimulation.model.knowledge.Knowledge;
import animalsimulation.model.knowledge.LocationKnowledge;

/**
 *
 * @author Ebombo2
 */
public class StraightWorkerBeeExploitMovement extends BaseMovement{

    @Override
    public void initialize(Agent agent, State state)
    {
        updateKnowledge((BeeAgent) agent);
        
        BeeFood[] foodSources = agent.getKnowledge().
            getKnownWorldObjectsByClass(BeeFood.class);
            
        int index = (int) Math.round(Math.random()*foodSources.length);
        if(index<=0) { index = 1; }

        LocationKnowledge location = agent.getKnowledge().
                getObjectKnowledgeByKnowledgeClass(foodSources[index-1], LocationKnowledge.class);

        double[] coordinates = location.getCoordinates();
        targetX = coordinates[0];
        targetY = coordinates[1];
    }
    
    @Override
    public void execute(Agent agent, State state) {
        BeeAgent bee = (BeeAgent) agent;
        double[] coordinates = bee.getCoordinates();
        
        double distance = bee.distanceToLocation(targetX, targetY);
            double[] movement = {
                (targetX - coordinates[0]) / distance * agent.getSpeed(),
                (targetY - coordinates[1]) / distance * agent.getSpeed()
            };
        agent.setCoordinates(coordinates[0] + movement[0], coordinates[1] + movement[1]);
                
        checkDestinationReached(agent, 1d);
    }
    
    private void updateKnowledge(BeeAgent agent) {
        BeeHive hive = agent.getHive();
        BeeFood[] foodSources = hive.getKnowledge().getKnownWorldObjectsByClass(BeeFood.class);
        
        for(WorldObject foodScource : foodSources) {
            Knowledge[] knowledge = hive.getKnowledge().getObjectKnowledge(foodScource);
            agent.getKnowledge().updateKnowledge(foodScource, knowledge);
        }
    }
}
